/**
* jquery.smartSticky 1.2.0
* by Ondrej Planer
* 
* This library requires jQuery.js
* See the documentation before using this library please
* jquery.smartSticky.js may be freely distributed under the MIT license.
*
* Copyright 2020, Ondrej Planer
 * 
 * 
 * PRESERVE THIS PLEASE
*/

!function (t) { "use strict"; "function" == typeof define && define.amd ? define(["jquery"], t) : "undefined" != typeof exports ? module.exports = t(require("jquery")) : t(window.jQuery) }(function (t) { "use strict"; var e = function (e, i) { var o = this; o.enabled = !0, o.setOptions(i).elementManagerInstance = new n(o, e), t.fn.smartSticky.scrollingManager.onScrolling(function () { o.adjustToCurrentScrollTop() }).getWindow().on("resize", function () { o.getElementManager().setOriginalPosition(), o.adjustToCurrentScrollTop() }).trigger("resize") }; e.prototype.getElementManager = function () { return this.elementManagerInstance }, e.prototype.getOptions = function () { return this.options }, e.prototype.setOptions = function (e) { return this.options = t.extend(!0, {}, t.fn.smartSticky.defaults, e), this }, e.prototype.canBeShownDueToScrolling = function () { if (this.getOptions().show.scrolling instanceof Function) return !0 === this.getOptions().show.scrolling(this.getElementManager(), t.fn.smartSticky.scrollingManager.scrollingDown()); if (t.fn.smartSticky.scrollingManager.scrollingDown()) { if (this.getOptions().show.scrolling.down) return !0 } else if (this.getOptions().show.scrolling.up) return !0; return !1 }, e.prototype.canBeShown = function () { return !!this.getElementManager().canBeShownDueToOrigPosition() && this.canBeShownDueToScrolling() }, e.prototype.adjustToCurrentScrollTop = function () { return this.enabled && (this.getElementManager().outOfOrigPosition() ? (this.getElementManager().getElement().hasClass(t.fn.smartSticky.classes.active) || this.getElementManager().activateFixedPosition(), this.getElementManager().getElement().addClass(t.fn.smartSticky.classes.invisible), this.getElementManager().outOfContainer() || this.canBeShown() && (this.getElementManager().getElement().removeClass(t.fn.smartSticky.classes.invisible), this.getElementManager().toBePlacedBottom() ? this.getElementManager().getElement().removeClass(t.fn.smartSticky.classes.top).addClass(t.fn.smartSticky.classes.bottom) : this.getElementManager().getElement().removeClass(t.fn.smartSticky.classes.bottom).addClass(t.fn.smartSticky.classes.top))) : this.getElementManager().setOriginalPosition()), this }, e.prototype.enable = function () { return this.enabled = !0, this.adjustToCurrentScrollTop(), this }, e.prototype.disable = function () { return this.enabled = !1, this.getElementManager().setOriginalPosition(), this }, e.prototype.hide = function () { return this.getElementManager().getElement().addClass(t.fn.smartSticky.classes.invisible), this }; var n = function (e, n) { this.elem = n.addClass(t.fn.smartSticky.classes.root).wrap(t("<div />", { class: t.fn.smartSticky.classes.placeholder })), this.options = e.getOptions(), this.positions = ["top", "bottom", "toggle"] }; n.prototype.getElement = function () { return this.elem }, n.prototype.setOriginalPosition = function () { return this.getElement().removeClass(t.fn.smartSticky.classes.active).css({ left: 0, width: "100%" }).data({ offsetTop: this.getElement().offset().top, height: this.getElement().outerHeight() }).trigger("smartSticky.deactivate"), this.getPlaceholder().height(this.getElement().outerHeight()), this }, n.prototype.activateFixedPosition = function () { return this.getElement().addClass(t.fn.smartSticky.classes.active).removeClass(t.fn.smartSticky.classes.background).css({ left: this.getFixedLeft(), width: this.getFixedWidth() }).trigger("smartSticky.activate"), "rgba(0, 0, 0, 0)" === this.getElement().css("background-color") && this.getElement().addClass(t.fn.smartSticky.classes.background), this }, n.prototype.getPlaceholder = function () { return this.getElement().parent("." + t.fn.smartSticky.classes.placeholder) }, n.prototype.getOrigOffsetTop = function () { return this.getElement().data("offsetTop") }, n.prototype.getOrigHeight = function () { return this.getElement().data("height") }, n.prototype.getContainer = function () { var e = this.options.container; return e instanceof Function && (e = e(this)), (e instanceof HTMLElement || e instanceof String || "string" == typeof e) && (e = t(e)), e instanceof jQuery && e.length > 0 ? e.first() : this.getPlaceholder().parent() }, n.prototype.getFixedLeft = function () { var e = this.options.css.fixed.left; return e instanceof Function && (e = e(this, t.fn.smartSticky.scrollingManager.scrollingDown())), Number.isFinite(e) || e instanceof String || "string" == typeof e ? e : this.getPlaceholder().offset().left }, n.prototype.getFixedWidth = function () { var e = this.options.css.fixed.width; return e instanceof Function && (e = e(this, t.fn.smartSticky.scrollingManager.scrollingDown())), Number.isFinite(e) || e instanceof String || "string" == typeof e ? e : this.getPlaceholder().outerWidth() }, n.prototype.outOfOrigPositionAbove = function () { return this.getOrigOffsetTop() - this.options.show.delay - t.fn.smartSticky.scrollingManager.getWindow().height() > t.fn.smartSticky.scrollingManager.getCurrentScrollTop() }, n.prototype.outOfOrigPositionUnder = function () { return this.getOrigOffsetTop() + this.getOrigHeight() + this.options.show.delay < t.fn.smartSticky.scrollingManager.getCurrentScrollTop() }, n.prototype.outOfOrigPosition = function () { return this.outOfOrigPositionAbove() || this.outOfOrigPositionUnder() }, n.prototype.outOfContainerAbove = function () { return t.fn.smartSticky.scrollingManager.getCurrentScrollTop() + (this.toBePlacedBottom() ? this.getElement().outerHeight() : 0) < this.getContainer().offset().top }, n.prototype.outOfContainerUnder = function () { var e = this.getContainer(); return t.fn.smartSticky.scrollingManager.getCurrentScrollTop() + (this.toBePlacedBottom() ? t.fn.smartSticky.scrollingManager.getWindow().height() : this.getElement().outerHeight()) > e.offset().top + e.outerHeight() }, n.prototype.outOfContainer = function () { return this.outOfContainerAbove() || this.outOfContainerUnder() }, n.prototype.getFixedPosition = function () { var e = this.options.show.fixed; if (e instanceof Function && (e = e(this, t.fn.smartSticky.scrollingManager.scrollingDown())), this.positions.indexOf(e) > -1) { if ("toggle" !== e) return e; if (!t.fn.smartSticky.scrollingManager.scrollingDown()) return "bottom" } return "top" }, n.prototype.toBePlacedBottom = function () { return "bottom" === this.getFixedPosition() }, n.prototype.canBeShownDueToOrigPosition = function () { return !(!this.outOfOrigPositionAbove() || !this.options.show.original.above) || !(!this.outOfOrigPositionUnder() || !this.options.show.original.under) }, t.fn.smartSticky = function (n) { var i = n instanceof String || "string" == typeof n, o = arguments; if (i && "instance" === n) { var r = this.data("smartStickyManagerInstance"); if (r instanceof e) return r; t.error("smartSticky has not been initialized") } return this.each(function () { var r = t(this); if (i) { var s = r.data("smartStickyManagerInstance"); s instanceof e && s[n] instanceof Function && s[n].apply(s, Array.prototype.slice.call(o, 1)) } else r.data("smartStickyManagerInstance") || r.data("smartStickyManagerInstance", new e(r, n)) }) }, t.fn.smartSticky.defaults = { show: { delay: 50, original: { under: !0, above: !1 }, fixed: "top", scrolling: { up: !1, down: !0 } }, container: null, css: { fixed: { width: null, left: null } } }, t.fn.smartSticky.classes = { placeholder: "sticky-smart-placeholder", root: "sticky-smart", invisible: "sticky-smart-invisible", active: "sticky-smart-active", bottom: "sticky-smart-bottom", top: "sticky-smart-top", background: "sticky-smart-background" }; var i = function () { var e = this; e.lastScrollTop = 0, e.onScrollingCallbackArr = new Array, e.ww = t(window).on("scroll", function () { e.onScrollingCallbackArr.forEach(function (t) { t(e) }), e.update() }) }; i.prototype.scrollingDown = function () { return this.lastScrollTop < this.getCurrentScrollTop() }, i.prototype.getCurrentScrollTop = function () { return this.getWindow().scrollTop() }, i.prototype.update = function () { return this.lastScrollTop = this.getCurrentScrollTop(), this }, i.prototype.onScrolling = function (t) { return this.onScrollingCallbackArr.push(t), this }, i.prototype.getWindow = function () { return this.ww }, t.fn.smartSticky.scrollingManager = new i });